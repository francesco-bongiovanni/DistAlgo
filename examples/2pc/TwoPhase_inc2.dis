from random import randint

class Coordinator(DistProcess):
    def setup(tid, cohorts):
        total1 = len(cohorts)
        received1 = set()
        received2 = set()
        received3 = set()
        q1 = set()
        count1 = 0
        count2 = 0
        count3 = 0

    def main():
        send(Prepare(tid), cohorts)
        await(count1 == total1)
        if count2 == total1:
            send(Commit(tid), cohorts)
            await(count3 == total1)
            print('log complete record for' + str(tid))
        else:
            s = q1
            send(Abort(tid), s)
        terminate()

    def terminate(): print('terminating')

    def OnVote(__result, _tid, _c):
        if _c in cohorts:
            if (_tid, _c) not in received1:
                received1.add((_tid, _c))
                count1 += 1
            if __result == 'ready':
                if (_tid, _c) not in received2:
                    received2.add((_tid, _c))
                    q1.add(_c)
                    count2 += 1

    def OnDone(_tid, _c):
        if _c in cohorts:
            if (_tid, _c) not in received3:
                received3.add((_tid, _c))
                count3 += 1

class Cohort(DistProcess):
    def setup(failure_rate): pass

    def main():
        await(False)

    def OnPrepare(tid):
        if prepared(tid):
            send(Vote('ready', tid, self), _source)
        else:
            send(Vote('abort', tid, self), _source)

    def OnCommit(tid):
        send(Done(tid, self), _source)
        commit(tid)

    def OnAbort(tid):
        abort(tid)

    def prepared(tid): return randint(0, 100) > failure_rate

    def commit(tid): print('commit' + str(tid))

    def abort(tid): print('abort' + str(tid))
