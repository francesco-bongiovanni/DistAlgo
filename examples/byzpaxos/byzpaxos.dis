
class Proposer(DistProcess):
    def setup(acceptors, maj, f):
        propNum = (0, self)          # Current proposal(ballot) number
        propVal = self          # Current value to propose

    def main():
        while True:
            --start
            send(Prepare(propNum, self), acceptors)
            await(len(received(Promise(propNum, _vp, _vv, _a)))>maj, TIMEOUT)
            --propose
            if (not _timeout):
                mn = (-2, self)
                safeval = None
                props = [(n, v)
                         for (n, v, _) in
                         received(Promise(propNum, _n, _v, _a))
                         if len(received(Promise(propNum, n, v, _a))) > f]
                for p in props:
                    if p[0] > mn: mn, safeval = p
                if (safeval != None):
                    propVal = safeval

                send(OneC(propNum, propVal, self), acceptors)
                await(len(received(TwoAv(propNum, propVal, a))) > maj, TIMEOUT)
                if (not _timeout): # We're done
                     --end
                     output("Succeeded proposing %r" % propVal)
                     continue
            --reinit
            output("Failed ballot %s, retrying."%str(propNum))
             # Try again with a higher proposal number
            propNum = next_prop_num()

    def next_prop_num():
        return (propNum[0]+1, self)

class Acceptor(DistProcess):
    def setup(peers, f):
        pass

    def main():
        await(False)

    def OnPrepare(n, p):
        if (n > maxpromised()):
            if (len(sent(TwoAv(_vpn, _vv, self))) > 0):
                maxpn, votedval, _ = max(sent(TwoAv(_vpn, _vv, self)))
                send(Promise(n, maxpn, votedval, self), peers)
            else:
                send(Promise(n, (-1, self), None, self), peers)

    def OnOneC(n, v, p):
        if (n >= maxpromised() and islegal(n, v) and
            len(sent(TwoAv(n, _v, self))) == 0):
            send(TwoAv(n, v, self), peers)
#            output("Sent 2av for %d in ballot %d"%(v, n))

    def OnTwoAv(propnum, propval, p):
        pass

    def maxpromised():
        pns = sent(Promise(pn, vp, vv, a))
        if (len(pns) == 0): return (-2, self)
        else:
            maxpn, _, _, _ = max(pns)
            return maxpn

    def islegal(propNum, propVal):
        props = [(n, v)
                 for (n, v, _) in received(Promise(propNum, vp, vv, a1))
                 if len(received(Promise(propNum, n, v, a2))) > f]
        mn = (-2, self)
        safeval = None
        for p in props:
            if p[0] > mn: mn, safeval = p
        if (safeval == None or propVal == safeval): return True
        else: return False
